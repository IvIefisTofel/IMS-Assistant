<?
use Zend\Mvc\Application;

$this->headTitle('Страница не найдена (404)');
$msg  = "<h1>" . $this->translate('A 404 error occurred') . "</h1>\n";
$msg .= "<h2>" . $this->translate('Page not found.') . "</h2>\n";

if (isset($this->reason) && $this->reason) {

    $reasonMessage = '';
    switch ($this->reason) {
        case Application::ERROR_CONTROLLER_CANNOT_DISPATCH:
            $reasonMessage = $this->translate('The requested controller was unable to dispatch the request.');
            break;
        case Application::ERROR_MIDDLEWARE_CANNOT_DISPATCH:
            $reasonMessage = $this->translate('The requested middleware was unable to dispatch the request.');
            break;
        case Application::ERROR_CONTROLLER_NOT_FOUND:
            $reasonMessage = $this->translate('The requested controller could not be mapped to an existing controller class.');
            break;
        case Application::ERROR_CONTROLLER_INVALID:
            $reasonMessage = $this->translate('The requested controller was not dispatchable.');
            break;
        case Application::ERROR_ROUTER_NO_MATCH:
            $reasonMessage = $this->translate('The requested URL could not be matched by routing.');
            break;
        default:
            $reasonMessage = $this->translate('We cannot determine at this time why a 404 was generated.');
            break;
    }

    $message = "<p>" . $reasonMessage . "</p>\n";
}

if (isset($this->controller) && $this->controller) {
    $message .= "<dl>\n";
    $message .= "<dt>" . $this->translate('Controller') . ":</dt>\n";
    $message .= "<dd>" . $this->escapeHtml($this->controller) . "\n"; 

    if (isset($this->controller_class)
        && $this->controller_class
        && $this->controller_class != $this->controller
    ) {
        $message .= '(' . sprintf($this->translate('resolves to %s'), $this->escapeHtml($this->controller_class)) . ")\n";
    }
    $message .= "</dd>\n";
    $message .= "</dl>\n";

}

if (isset($this->display_exceptions) && $this->display_exceptions) {
    if(isset($this->exception) && ($this->exception instanceof \Exception || $this->exception instanceof \Error)) {
        $message .= "<hr/>\n";
        $message .= "<h2>" . $this->translate('Additional information') . ":</h2>\n";
        $message .= "<h3>" . get_class($this->exception) . "</h3>\n";
        $message .= "<dl>\n";
        $message .= "<dt>" . $this->translate('File') . ":</dt>\n";
        $message .= "<dd>\n";
        $message .= "<pre class=\"prettyprint linenums\">" . $this->exception->getFile() . ":" . $this->exception->getLine() . "</pre>\n";
        $message .= "</dd>\n";
        $message .= "<dt>" . $this->translate('Message') . ":</dt>\n";
        $message .= "<dd>\n";
        $message .= "<pre class=\"prettyprint linenums\">" . $this->exception->getMessage() . "</pre>\n";
        $message .= "</dd>\n";
        $message .= "<dt>" . $this->translate('Stack trace') . ":</dt>\n";
        $message .= "<dd>\n";
        $message .= "<pre class=\"prettyprint linenums\">" . $this->exception->getTraceAsString() . "</pre>\n";
        $message .= "</dd>\n";
        $message .= "</dl>\n";

        if ($e = $this->exception->getPrevious()) {
            $message .= "<hr/>\n";
            $message .= "<h2>" . $this->translate('Previous exceptions') . ":</h2>\n";
            $message .= "<ul class=\"unstyled\">\n";

            $icount = 0;
            while($e) {
                $message .= "<li>\n";
                $message .= "<h3>" . get_class($e) . "</h3>\n";
                $message .= "<dl>\n";
                $message .= "<dt>" . $this->translate('File') . ":</dt>\n";
                $message .= "<dd>\n";
                $message .= "<pre class=\"prettyprint linenums\">" . $e->getFile() . ":" . $e->getLine() . "</pre>\n";
                $message .= "</dd>\n";
                $message .= "<dt>" . $this->translate('Message') . ":</dt>\n";
                $message .= "<dd>\n";
                $message .= "<pre class=\"prettyprint linenums\">" . $e->getMessage() . "</pre>\n";
                $message .= "</dd>\n";
                $message .= "<dt>" . $this->translate('Stack trace') . ":</dt>\n";
                $message .= "<dd>\n";
                $message .= "<pre class=\"prettyprint linenums\">" . $e->getTraceAsString() . "</pre>\n";
                $message .= "</dd>\n";
                $message .= "</dl>\n";
                $message .= "</li>\n";
                
                $e = $e->getPrevious();
                if (++$icount >= 50) {
                    $message .= "<li>There may be more exceptions, but we do not have enough memory to process it.</li>";
                    break;
                }
            }
            $message .= "</ul>\n";
        }
    } else {
        $message .= "<h3>" . $this->translate('No Exception available') . "</h3>\n";
    }
}

$env = (getenv('APP_ENV') == 'development') ? true : false;
if ($env) {
    echo $msg . $message;
} else {
    echo $msg;
//    echo $msg;
//    $this->sendMessage(
//        \Emails\Entity\Email::TYPE_ERROR,
//        [\Emails\Entity\Email::TYPE_ERROR => true],
//        $header,
//        $msg . $message
//    );
}